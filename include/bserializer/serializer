#ifndef BSERIALIZER_SERIALIZER_H_
#define BSERIALIZER_SERIALIZER_H_

#include <bit>
#include <iterator>
#include <utility>
#include <tuple>
#include <exception>

#include <bserializer/serializable>

namespace bserializer {
    namespace details {
        template <typename _T>
        inline static void AddRef(_T& ref, _T val) {
            ref += val;
        }

        template <typename _T>
        inline static void ByteSwap(_T& bytes) {
            char* bytes2 = (char*)&bytes;
            std::reverse(bytes2, bytes2 + sizeof(_T));
        }

        template <typename _TTuple, std::size_t _Index, typename _TFirst, typename... _TsAll>
        struct TupleDeserializer2 {
            inline static void DeserializeTuple(const void*& data, _TTuple& tuple);
        };

        template <typename _TTuple>
        struct TupleDeserializer;

        template <typename _TFirst, typename... _TsAll>
        struct TupleDeserializer<std::tuple<_TFirst, _TsAll...>> final
            : TupleDeserializer2<std::tuple<_TFirst, _TsAll...>, 0, _TFirst, _TsAll...> { };

        template <typename _TTuple>
        inline static void DeserializeTuple(const void*& data, _TTuple& tuple);

        template <std::size_t _Index, typename... _Ts>
        struct VariantHelper2 {
            static std::size_t SerializedSize(const std::variant<_Ts...>& variant);

            static void Serialize(void*& data, const std::variant<_Ts...>& variant);

            static void Deserialize(const void*& data, std::size_t index, std::variant<_Ts...>* variant);
        };

        template <typename _T>
        struct VariantHelper;

        template <typename... _Ts>
        struct VariantHelper<std::variant<_Ts...>>
            : VariantHelper2<0, _Ts...> { };

        template <typename _TVariant>
        static std::size_t VariantSerializedSize(const _TVariant& variant);

        template <typename _TVariant>
        static void VariantSerialize(void*& data, const _TVariant& variant);

        template <typename _TVariant>
        static void VariantDeserialize(const void*& data, _TVariant* variant);
    }

    /**
     * @brief If the architecture is big-endian, the function will reverse the order of the bytes of value. If not, the function returns the value it was given.
     * @tparam _T The type of the value.
     * @param[in] value The value whose bytes are conditionally reversed.
     * @return The resulting value.
     */
    template <typename _T>
    static inline _T ToFromLittleEndian(_T value) {
        if constexpr (std::endian::native == std::endian::big) details::ByteSwap(value);
        return value;
    }
    /**
     * @brief If the architecture is big-endian, for each value in the array, the function will reverse the order of the bytes in the value. If not, the function does nothing.
     * @tparam _T The type of the array elements.
     * @param[in,out] lower A pointer to the inclusive lower bound of the array.
     * @param[in,out] upper A pointer to the exclusive upper bound of the array.
     */
    template <typename _T>
    static inline void ToFromLittleEndian(_T* lower, _T* upper) {
        if constexpr (std::endian::native == std::endian::big) {
            for (; lower < upper; ++lower) {
                details::ByteSwap(*lower);
            }
        }
    }
    /**
     * @brief If the architecture is big-endian, for each value in the array, the function will reverse the order of the bytes in the value. If not, the function does nothing.
     * @tparam _T The type of the array elements.
     * @param[in,out] array A pointer to the inclusive lower bound of the array.
     * @param[in] length The quantity of elements in the array.
     */
    template <typename _T>
    static inline void ToFromLittleEndian(_T* array, std::size_t length) {
        ToFromLittleEndian(array, array + length);
    }

    /**
     * @brief Returns what the serialized size of a value in memory would be if it were serialized.
     * @tparam _T The type of the value. _T must conform to bserializer::Serializable.
     * @param[in] value The value whose serialized size will be precalculated.
     * @return What the serialized size of a value in memory would be if it were serialized.
     */
    template <Serializable _T>
    static inline std::size_t SerializedSize(const _T& value);
    /**
     * @brief Serializes a value.
     * @tparam _T The type of the value serialized. _T must conform to bserializer::Serializable.
     * @param[out] data A pointer to the destination of the serialized data. After serialization, the pointer will be adjusted by the size of the data written.
     * @param[in] value The value to serialize.
     */
    template <Serializable _T>
    static inline void Serialize(void*& data, const _T& value);
    /**
     * @brief Deserializes a value.
     * @tparam _T The type of the value deserialized. _T must conform to bserializer::Serializable.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @return The deserialized value.
     */
    template <Serializable _T>
    static inline _T Deserialize(const void*& data);
    /**
     * @brief Deserializes a value.
     * @tparam _T The type of the value deserialized. _T must conform to bserializer::Serializable.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] value A pointer to the location in memory in which the deserialized value will be placed.
     */
    template <Serializable _T>
    static inline void Deserialize(const void*& data, _T* value);
    /**
     * @brief Deserializes a value.
     * @tparam _T The type of the value deserialized. _T must conform to bserializer::Serializable.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] value A pointer to the location in memory in which the deserialized value will be placed.
     */
    template <Serializable _T>
    static inline void Deserialize(const void*& data, void* value);
    /**
     * @brief Deserializes a value.
     * @tparam _T The type of the value deserialized. _T must conform to bserializer::Serializable.
     * @param data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @return The deserialized value.
     */
    template <Serializable _T>
    static inline _T Deserialize(void*& data);
    /**
     * @brief Deserializes a value.
     * @tparam _T The type of the value deserialized. _T must conform to bserializer::Serializable.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] value A pointer to the location in memory in which the deserialized value will be placed.
     */
    template <Serializable _T>
    static inline void Deserialize(void*& data, _T* value);
    /**
     * @brief Deserializes a value.
     * @tparam _T The type of the value deserialized. _T must conform to bserializer::Serializable.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] value A pointer to the location in memory in which the deserialized value will be placed.
     */
    template <Serializable _T>
    static inline void Deserialize(void*& data, void* value);

    /**
     * @brief Returns what the serialized size of an array of values in memory would be if it were serialized.
     * @tparam _T The type of the array elements. _T must conform to bserializer::Serializable.
     * @param[in] lower A pointer to the inclusive lower bound of the array.
     * @param[in] upper A pointer to the exclusive upper bound of the array.
     * @return What the serialized size of the array in memory would be if it were serialized.
     */
    template <Serializable _T>
    static inline std::size_t SerializedArraySize(const _T* lower, const _T* upper);
    /**
     * @brief Returns what the serialized size of an array of values in memory would be if it were serialized.
     * @tparam _T The type of the array elements. _T must conform to bserializer::Serializable.
     * @param[in] array A pointer to the inclusive lower bound of the array.
     * @param[in] length The quantity of elements in the array.
     * @return What the serialized size of the array in memory would be if it were serialized.
     */
    template <Serializable _T>
    static inline std::size_t SerializedArraySize(const _T* array, std::size_t length);
    /**
     * @brief Serializes an array of values.
     * @tparam _T The type of the array elements. _T must conform to bserializer::Serializable.
     * @param[out] data A pointer to the destination of the serialized data. After serialization, the pointer will be adjusted by the size of the data written.
     * @param[in] lower A pointer to the inclusive lower bound of the array.
     * @param[in] upper A pointer to the exclusive upper bound of the array.
     */
    template <Serializable _T>
    static inline void SerializeArray(void*& data, const _T* lower, const _T* upper);
    /**
     * @brief Serializes an array of values.
     * @tparam _T The type of the array elements. _T must conform to bserializer::Serializable.
     * @param[out] data A pointer to the destination of the serialized data. After serialization, the pointer will be adjusted by the size of the data written.
     * @param[in] array A pointer to the inclusive lower bound of the array.
     * @param[in] length The quantity of elements in the array.
     */
    template <Serializable _T>
    static inline void SerializeArray(void*& data, const _T* array, std::size_t length);
    /**
     * @brief Deserializes an array of values.
     * @tparam _T The type of the array elements. _T must conform to bserializer::Serializable.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] lower A pointer to the inclusive lower bound of the array.
     * @param[out] upper A pointer to the exclusive upper bound of the array.
     */
    template <Serializable _T>
    static inline void DeserializeArray(const void*& data, _T* lower, _T* upper);
    /**
     * @brief Deserializes an array of values.
     * @tparam _T The type of the array elements. _T must conform to bserializer::Serializable.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] array A pointer to the inclusive lower bound of the array.
     * @param[in] length The quantity of elements in the array.
     */
    template <Serializable _T>
    static inline void DeserializeArray(const void*& data, _T* array, std::size_t length);

    /**
     * @brief Returns the size of the raw serialized data. After serialization, the pointer will be adjusted by the size of the data written.
     * @tparam _T The type of the value.
     * @param[in] value The value to be serialized.
     * @return The size of the raw serialized data.
     */
    template <typename _T>
    static inline std::size_t SerializedRawSize(const _T& value);
    /**
     * @brief Serializes a value into raw data.
     * @tparam _T The type of the value.
     * @param[out] data A pointer to the destination of the serialized data. After serialization, the pointer will be adjusted by the size of the data written.
     * @param[in] value The value to be serialized.
     */
    template <typename _T>
    static inline void SerializeRaw(void*& data, const _T& value);
    /**
     * @brief Deserializes a value from raw data.
     * @tparam _T The type of the value.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @return The deserialized value.
     */
    template <typename _T>
    static inline _T DeserializeRaw(const void*& data);
    /**
     * @brief Deserializes a value from raw data.
     * @tparam _T The type of the value.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] value A pointer to the location in memory in which the deserialized value will be placed.
     */
    template <typename _T>
    static inline void DeserializeRaw(const void*& data, _T* value);
    /**
     * @brief Deserializes a value from raw data.
     * @tparam _T The type of the value.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] value A pointer to the location in memory in which the deserialized value will be placed.
     */
    template <typename _T>
    static inline void DeserializeRaw(const void*& data, void* value);

    /**
     * @brief Returns the size of the raw serialized data for an array.
     * @param[in] lower A pointer to the inclusive lower bound of the array.
     * @param[in] upper A pointer to the exclusive upper bound of the array.
     * @return The size of the raw serialized data for the array.
     */
    static inline std::size_t SerializedRawSize(const void* lower, const void* upper);
    /**
     * @brief Serializes an array into raw data.
     * @param[out] data A pointer to the destination of the serialized data. After serialization, the pointer will be adjusted by the size of the data written.
     * @param[in] lower A pointer to the inclusive lower bound of the array.
     * @param[in] upper A pointer to the exclusive upper bound of the array.
     */
    static inline void SerializeRaw(void*& data, const void* lower, const void* upper);
    /**
     * @brief Serializes an array into raw data.
     * @param[out] data A pointer to the destination of the serialized data. After serialization, the pointer will be adjusted by the size of the data written.
     * @param[in] lower A pointer to the inclusive lower bound of the array.
     * @param[in] length The quantity of elements in the array.
     */
    static inline void SerializeRaw(void*& data, const void* lower, std::size_t length);
    /**
     * @brief Deserializes an array from raw data.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] lower A pointer to the inclusive lower bound of the array.
     * @param[out] upper A pointer to the exclusive upper bound of the array.
     */
    static inline void DeserializeRaw(const void*& data, void* lower, void* upper);
    /**
     * @brief Deserializes an array from raw data.
     * @param[in,out] data A pointer to the source of the serialized data. After serialization, the pointer will be adjusted by the size of the data read.
     * @param[out] lower A pointer to the inclusive lower bound of the array.
     * @param[in] length The quantity of elements in the array.
     */
    static inline void DeserializeRaw(const void*& data, void* lower, std::size_t length);
}

namespace bserializer {
    namespace details {
        template <typename _TTuple, std::size_t _Index, typename _TFirst, typename... _TsAll>
        inline void TupleDeserializer2<_TTuple, _Index, _TFirst, _TsAll...>::DeserializeTuple(const void*& data, _TTuple& tuple) {
            _TFirst& v = std::get<_Index>(tuple);
            Deserialize<_TFirst>(data, &v);
            if constexpr (sizeof...(_TsAll)) {
                TupleDeserializer2<_TTuple, _Index + 1, _TsAll...>::DeserializeTuple(data, tuple);
            }
        }

        template <typename _TTuple>
        inline static void DeserializeTuple(const void*& data, _TTuple& tuple) {
            TupleDeserializer<_TTuple>::DeserializeTuple(data, tuple);
        }

        template <std::size_t _Index, typename... _Ts>
        std::size_t VariantHelper2<_Index, _Ts...>::SerializedSize(const std::variant<_Ts...>& variant) {
            if constexpr (_Index >= sizeof...(_Ts)) {
                if constexpr ((std::same_as<std::monostate, _Ts> || ...)) return sizeof(std::size_t);
                else throw std::out_of_range("Index of 'std::variant<...>' is out of bounds; parameter 'variant' is invalid.");
            }
            else if (variant.index() == _Index) {
                using element_t = std::tuple_element_t<_Index, std::tuple<_Ts...>>;
                if constexpr (std::same_as<element_t, std::monostate>) return sizeof(std::size_t);
                else return sizeof(std::size_t) + SerializedSize(std::get<_Index>(variant));
            }
            else {
                return VariantHelper2<_Index + 1, _Ts...>::SerializedSize(variant);
            }
        }

        template <std::size_t _Index, typename... _Ts>
        void VariantHelper2<_Index, _Ts...>::Serialize(void*& data, const std::variant<_Ts...>& variant) {
            if constexpr (_Index >= sizeof...(_Ts)) {
                if constexpr ((std::same_as<std::monostate, _Ts> || ...)) {
                    Serialize(data, (std::size_t)0 - (std::size_t)1);
                }
                else throw std::out_of_range("Index of 'std::variant<...>' is out of bounds; parameter 'variant' is invalid.");
            }
            else if (variant.index() == _Index) {
                using element_t = std::tuple_element_t<_Index, std::tuple<_Ts...>>;
                Serialize(data, _Index);
                if constexpr (!std::same_as<element_t, std::monostate>) {
                    Serialize(data, std::get<_Index>(variant));
                }
            }
            else {
                VariantHelper2<_Index + 1, _Ts...>::Serialize(data, variant);
            }
        }

        template <std::size_t _Index, typename... _Ts>
        void VariantHelper2<_Index, _Ts...>::Deserialize(const void*& data, std::size_t index, std::variant<_Ts...>* variant) {
            if constexpr (_Index >= sizeof...(_Ts)) {
                if constexpr ((std::same_as<std::monostate, _Ts> || ...)) {
                    new (variant) std::variant<_Ts...>(std::monostate());
                }
                else {
                    throw std::out_of_range("Deserialized index is out of bounds.");
                }
            }
            else if (index == _Index) {
                using element_t = std::tuple_element_t<_Index, std::tuple<_Ts...>>;
                if constexpr (std::same_as<element_t, std::monostate>) {
                    new (variant) std::variant<_Ts...>(std::monostate());
                }
                else {
                    new (variant) std::variant<_Ts...>(bserializer::Deserialize<element_t>(data));
                }
            }
            else {
                VariantHelper2<_Index + 1, _Ts...>::Deserialize(data, index, variant);
            }
        }

        template <typename _TVariant>
        std::size_t VariantSerializedSize(const _TVariant& variant) {
            return VariantHelper<_TVariant>::SerializedSize(variant);
        }

        template <typename _TVariant>
        void VariantSerialize(void*& data, const _TVariant& variant) {
            VariantHelper<_TVariant>::Serialize(data, variant);
        }

        template <typename _TVariant>
        void VariantDeserialize(const void*& data, _TVariant* variant) {
            std::size_t idx = Deserialize<std::size_t>(data);
            VariantHelper<_TVariant>::Deserialize(data, idx, variant);
        }
    }

    template <Serializable _T>
    inline std::size_t SerializedSize(const _T& value) {
        if constexpr (BuiltInSerializable<_T>) {
            return value.SerializedSize();
        }
        else if constexpr (SerializableCollection<_T>) {
            using value_t = typename _T::value_type;
            std::size_t t = sizeof(std::size_t);
            if constexpr (std::same_as<value_t, bool>) {
                std::size_t s = value.size();
                t += s >> 3;
                if (s & 7) t += 1;
            }
            else {
                for (auto& v : value) {
                    t += SerializedSize(v);
                }
            }
            return t;
        }
        else if constexpr (Arithmetic<_T>) {
            return sizeof(_T);
        }
        else if constexpr (SerializableStdPair<_T>) {
            return
                SerializedSize(value.first) +
                SerializedSize(value.second);
        }
        else if constexpr (SerializableStdTuple<_T>) {
            std::size_t t = 0;
            std::apply([&t](const auto&... args) {
                (details::AddRef(t, SerializedSize(args)), ...);
            }, value);
            return t;
        }
        else if constexpr (StdComplex<_T>) {
            return sizeof(decltype(value.real())) << 1;
        }
        else if constexpr (SerializableStdArray<_T>) {
            std::size_t t = 0;
            for (auto& e : value) t += SerializedSize(e);
            return t;
        }
        else if constexpr (SerializableStdOptional<_T>) {
            if (value) {
                return sizeof(bool) + SerializedSize(*value);
            }
            else return sizeof(bool);
        }
        else if constexpr (SerializableStdVariant<_T>) {
            return details::VariantSerializedSize(value);
        }
        else if constexpr (StdDuration<_T>) {
            return sizeof(decltype(value.count()));
        }
        else if constexpr (StdTimePoint<_T>) {
            return sizeof(decltype(value.time_since_epoch().count()));
        }
    }

    template <Serializable _T>
    inline void Serialize(void*& data, const _T& value) {
        if constexpr (BuiltInSerializable<_T>) {
            value.Serialize(data);
        }
        else if constexpr (SerializableCollection<_T>) {
            using value_t = typename _T::value_type;
            std::size_t len = value.size();
            Serialize(data, len);
            if (len) {
                if constexpr (std::same_as<value_t, bool>) {
                    uint64_t m = 1;
                    uint64_t c = 0;
                    if constexpr (std::same_as<decltype(*value.cbegin()), bool>) {
                        for (bool v : value) {
                            if (!m) {
                                Serialize(data, c);
                                m = 1;
                                c = 0;
                            }
                            if (v) c |= m;
                            m <<= 1;
                        }
                    }
                    else {
                        for (auto& v : value) {
                            if (!m) {
                                Serialize(data, c);
                                m = 1;
                                c = 0;
                            }
                            if (v) c |= m;
                            m <<= 1;
                        }
                    }
                    if (m) {
                        std::size_t i;
                        if (!(c >> 8)) i = 1;
                        else if (!(c >> 16)) i = 2;
                        else if (!(c >> 24)) i = 3;
                        else if (!(c >> 32)) i = 4;
                        else if (!(c >> 40)) i = 5;
                        else if (!(c >> 48)) i = 6;
                        else if (!(c >> 56)) i = 7;
                        else i = 8;
                        if constexpr (std::endian::native == std::endian::big) std::reverse((char*)&c, ((char*)&c) + i);
                        memcpy(data, &c, i);
                        data = ((char*)data) + i;
                    }
                    else Serialize(data, c);
                }
                else for (auto& v : value) Serialize(data, v);
            }
        }
        else if constexpr (Arithmetic<_T>) {
            _T v2 = ToFromLittleEndian(value);
            memcpy(data, &v2, sizeof(_T));
            data = ((_T*)data + 1);
        }
        else if constexpr (SerializableStdPair<_T>) {
            Serialize(data, value.first);
            Serialize(data, value.second);
        }
        else if constexpr (SerializableStdTuple<_T>) {
            std::apply([&data](const auto&... args) {
                (Serialize(data, args), ...);
            }, value);
        }
        else if constexpr (StdComplex<_T>) {
            Serialize(data, value.real());
            Serialize(data, value.imag());
        }
        else if constexpr (SerializableStdArray<_T>) {
            for (auto& e : value) Serialize(data, e);
        }
        else if constexpr (SerializableStdOptional<_T>) {
            if (value) {
                Serialize(data, true);
                Serialize(data, *value);
            }
            else Serialize(data, false);
        }
        else if constexpr (SerializableStdVariant<_T>) {
            details::VariantSerialize(data, value);
        }
        else if constexpr (StdDuration<_T>) {
            Serialize(data, value.count());
        }
        else if constexpr (StdTimePoint<_T>) {
            Serialize(data, value.time_since_epoch());
        }
    }

    template <Serializable _T>
    inline _T Deserialize(const void*& data) {
        char bytes[sizeof(_T)];
        _T& r = *(_T*)bytes;
        Deserialize(data, &r);
        return r;
    }

    template <Serializable _T>
    inline void Deserialize(const void*& data, _T* value) {
        Deserialize<_T>(data, *(void**)&value);
    }

    template <Serializable _T>
    inline void Deserialize(const void*& data, void* value) {
        if constexpr (BuiltInSerializable<_T>) {
            _T::Deserialize(data, value);
        }
        else if constexpr (SerializableCollection<_T>) {
            using value_t = typename _T::value_type;
            std::size_t len = Deserialize<std::size_t>(data);
            value_t* arr = (value_t*)malloc(sizeof(value_t) * len);
            value_t* b = arr + len;
            if constexpr (std::same_as<value_t, bool>) {
                bool* fb = arr + (len & ~((1ui64 << 6) - 1));
                uint64_t m = 0;
                uint64_t c = 0;
                for (bool* p_v = arr; p_v < fb; ++p_v) {
                    if (!m) {
                        m = 1;
                        Deserialize(data, &c);
                    }
                    *p_v = (bool)(c & m);
                    m <<= 1;
                }
                if (fb != b) {
                    std::size_t i = b - fb;
                    i = (i >> 3) + ((i & 7ui64) ? 1ui64 : 0ui64);
                    memcpy(&c, data, i);
                    if constexpr (std::endian::native == std::endian::big) std::reverse((char*)&c, ((char*)&c) + i);
                    data = ((char*)data) + i;
                    m = 1;
                    for (bool* p_v = fb; p_v < b; ++p_v) {
                        *p_v = (bool)(c & m);
                        m <<= 1;
                    }
                }
            }
            else for (value_t* i = arr; i < b; ++i) Deserialize(data, i);
            new (value) _T(std::initializer_list<value_t>(arr, b));
            free(arr);
        }
        else if constexpr (Arithmetic<_T>) {
            new (value) _T(ToFromLittleEndian(*(_T*)data));
            data = ((_T*)data) + 1;
        }
        else if constexpr (SerializableStdPair<_T>) {
            using t1_t = _T::first_type;
            using t2_t = _T::second_type;
            if constexpr (sizeof(t1_t) >> 8) {
                t1_t* p_v1 = (t1_t*)malloc(sizeof(t1_t));
                t1_t& v1 = *p_v1;
                Deserialize(data, p_v1);
                if constexpr (sizeof(t2_t) >> 8) {
                    t2_t* p_v2 = (t2_t*)malloc(sizeof(t2_t));
                    t2_t& v2 = *p_v2;
                    Deserialize(data, p_v2);
                    new (value) _T(v1, v2);
                    free(p_v2);
                }
                else {
                    t2_t v2 = Deserialize<t2_t>(data);
                    new (value) _T(v1, v2);
                }
                free(p_v1);
            }
            else {
                t1_t v1 = Deserialize<t1_t>(data);
                if constexpr (sizeof(t2_t) >> 8) {
                    t2_t* p_v2 = (t2_t*)malloc(sizeof(t2_t));
                    t2_t& v2 = *p_v2;
                    Deserialize(data, p_v2);
                    new (value) _T(v1, v2);
                    free(p_v2);
                }
                else {
                    t2_t v2 = Deserialize<t2_t>(data);
                    new (value) _T(v1, v2);
                }
            }
        }
        else if constexpr (SerializableStdTuple<_T>) {
            details::DeserializeTuple(data, *(_T*)value);
        }
        else if constexpr (StdComplex<_T>) {
            using component_t = decltype(std::declval<_T>().real());
            component_t re = Deserialize<component_t>(data);
            component_t im = Deserialize<component_t>(data);
            new (value) _T(re, im);
        }
        else if constexpr (SerializableStdArray<_T>) {
            using value_t = typename _T::value_type;
            constexpr std::size_t size = std::tuple_size_v<_T>;
            value_t* i = (value_t*)value;
            value_t* upper = i + size;
            for (; i < upper; ++i) Deserialize(data, i);
        }
        else if constexpr (SerializableStdOptional<_T>) {
            bool v = Deserialize<bool>(data);
            if (v) new (value) _T(Deserialize<typename _T::value_type>(data));
            else new (value) _T;
        }
        else if constexpr (SerializableStdVariant<_T>) {
            details::VariantDeserialize(data, (_T*)value);
        }
        else if constexpr (StdDuration<_T>) {
            using internal_t = decltype(std::declval<_T>().count());
            new (value) _T(Deserialize<internal_t>(data));
        }
        else if constexpr (StdTimePoint<_T>) {
            using internal_t = decltype(std::declval<_T>().time_since_epoch());
            new (value) _T(Deserialize<internal_t>(data));
        }
    }

    template <Serializable _T>
    inline _T Deserialize(void*& data) {
        return Deserialize<_T>(const_cast<const void*&>(data));
    }

    template <Serializable _T>
    inline void Deserialize(void*& data, _T* value) {
        Deserialize(const_cast<const void*&>(data), value);
    }

    template <Serializable _T>
    inline void Deserialize(void*& data, void* value) {
        Deserialize<_T>(const_cast<const void*&>(data), value);
    }

    template <Serializable _T>
    inline std::size_t SerializedArraySize(const _T* lower, const _T* upper) {
        std::size_t t = 0;
        for (; lower < upper; ++lower) t += SerializedSize(*lower);
        return t;
    }

    template <Serializable _T>
    inline std::size_t SerializedArraySize(const _T* array, std::size_t length) {
        return SerializedArraySize(array, array + length);
    }

    template <Serializable _T>
    inline void SerializeArray(void*& data, const _T* lower, const _T* upper) {
        for (; lower < upper; ++lower) Serialize(data, *lower);
    }

    template <Serializable _T>
    inline void SerializeArray(void*& data, const _T* array, std::size_t length) {
        SerializeArray(data, array, array + length);
    }

    template <Serializable _T>
    inline void DeserializeArray(const void*& data, _T* lower, _T* upper) {
        for (; lower < upper; ++lower) *lower = Deserialize<_T>(data);
    }

    template <Serializable _T>
    inline void DeserializeArray(const void*& data, _T* array, std::size_t length) {
        DeserializeArray(data, array, array + length);
    }

    template <typename _T>
    inline std::size_t SerializedRawSize(const _T& value) {
        return sizeof(_T);
    }

    template <typename _T>
    inline void SerializeRaw(void*& data, const _T& value) {
        SerializeRaw(data, &value, sizeof(_T));
    }

    template <typename _T>
    inline _T DeserializeRaw(const void*& data) {
        char bytes[sizeof(_T)];
        DeserializeRaw(data, bytes, sizeof(_T));
        return *(_T*)bytes;
    }

    template <typename _T>
    inline void DeserializeRaw(const void*& data, _T* value) {
        DeserializeRaw(data, (void*)value);
    }

    template <typename _T>
    inline void DeserializeRaw(const void*& data, void* value) {
        DeserializeRaw(data, value, sizeof(_T));
    }

    inline std::size_t SerializedRawSize(const void* lower, const void* upper) {
        return (char*)upper - (char*)lower;
    }

    inline void SerializeRaw(void*& data, const void* lower, const void* upper) {
        SerializeRaw(data, lower, (char*)upper - (char*)lower);
    }

    inline void SerializeRaw(void*& data, const void* lower, std::size_t length) {
        memcpy(data, lower, length);
        data = ((char*)data) + length;
    }

    inline void DeserializeRaw(const void*& data, void* lower, void* upper) {
        DeserializeRaw(data, lower, (char*)upper - (char*)lower);
    }

    inline void DeserializeRaw(const void*& data, void* lower, std::size_t length) {
        memcpy(lower, data, length);
        data = ((char*)data) + length;
    }
}

#endif // BSERIALIZER_SERIALIZER_H_
